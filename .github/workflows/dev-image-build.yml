name: Build & Push Dev Images

on:
  push:
    branches: [ dev ]

permissions:
  contents: read
  packages: write

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: set
        shell: bash
        run: |
          set -euo pipefail
          base="${{ github.event.before }}"
          head="${{ github.sha }}"

          # Find changed Dockerfiles or VERSION files; build all if first push
          if [ -z "$base" ] || [ "$base" = "0000000000000000000000000000000000000000" ]; then
            paths="$(git ls-files 'salamicontainers/**/Dockerfile')"
          else
            paths="$(git diff --name-only "$base" "$head" -- 'salamicontainers/**/Dockerfile' 'salamicontainers/**/VERSION' || true)"
            [ -n "$paths" ] || paths="$(git ls-files 'salamicontainers/**/Dockerfile')"
          fi

          # Collect app dirs that contain a Dockerfile
          dirs="$(for p in $paths; do d="$(dirname "$p")"; [ -f "$d/Dockerfile" ] && echo "$d"; done | sort -u)"

          includes="[]"
          for d in $dirs; do
            # Expect: salamicontainers/salami/<app>/<major>/Dockerfile
            major="$(basename "$d")"
            app="$(basename "$(dirname "$d")")"
            ver="$(tr -d '\n\r\t ' < "$d/VERSION")"
            image="ghcr.io/${{ github.repository_owner }}/salami-${app}-${major}"
            tags="${image}:${ver}-dev,${image}:dev"
            includes="$(jq -c --arg dir "$d" --arg img "$image" --arg ver "$ver" --arg tags "$tags" \
              '. + [{dir:$dir,image:$img,version:$ver,tags:$tags}]' <<<"$includes")"
          done

          echo "matrix=$(jq -c '{include: .}' <<<"$includes")" >> "$GITHUB_OUTPUT"

      - name: Show matrix
        run: echo '${{ steps.set.outputs.matrix }}' | jq .

  build-and-push:
    needs: detect
    if: ${{ needs.detect.outputs.matrix != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push ${{ matrix.image }}
        shell: bash
        run: |
          set -euo pipefail
          IFS=, read -r TAG1 TAG2 <<<"${{ matrix.tags }}"
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -f "${{ matrix.dir }}/Dockerfile" \
            --build-arg APP_VERSION="${{ matrix.version }}" \
            -t "$TAG1" -t "$TAG2" \
            --push \
            "${{ matrix.dir }}"