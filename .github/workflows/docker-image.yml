name: Build & Push Docker Images

on:
  push:
    paths:
      - "salami/**/Dockerfile"
      - "salami/**/docker-compose.yml"
  workflow_dispatch:
    inputs:
      target:
        description: "Path to the Dockerfile (e.g. salami/grafana/12/debian-12/Dockerfile)"
        required: false
        type: string

jobs:
  detect-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine changed Dockerfiles
        id: changed
        if: github.event_name == 'push'
        run: |
          files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'Dockerfile' || true)
          echo "changed_files=$files" >> $GITHUB_OUTPUT

      - name: Build & Push changed images
        if: github.event_name == 'push' && steps.changed.outputs.changed_files != ''
        run: |
          owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          for file in ${{ steps.changed.outputs.changed_files }}; do
            dir=$(dirname "$file")
            name=$(echo "$dir" | tr '/' '-')
            image="ghcr.io/$owner/$name:latest"

            echo "Building and pushing $file as $image"
            docker build -t "$image" "$dir"
            docker push "$image"
          done

      - name: Manual build & push
        if: github.event_name == 'workflow_dispatch' && inputs.target != ''
        run: |
          owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          dir=$(dirname "${{ inputs.target }}")
          name=$(echo "$dir" | tr '/' '-')
          image="ghcr.io/$owner/$name:latest"

          echo "Building and pushing manual target ${{ inputs.target }} as $image"
          docker build -t "$image" "$dir"
          docker push "$image"
