name: Build & Push Docker Images

on:
  push:
    paths:
      - "salami/**/Dockerfile"
      - "salami/**/docker-compose.yml"
      - "salami/**/VERSION"
  workflow_dispatch:
    inputs:
      target:
        description: "Path to the Dockerfile (e.g. salami/grafana/12/debian-12/Dockerfile)"
        required: false
        type: string

permissions:
  packages: write
  contents: read

jobs:
  detect-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch full git history
        run: git fetch --prune --unshallow || true

      - name: Determine changed Dockerfiles
        id: changed
        if: github.event_name == 'push'
        run: |
          files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'Dockerfile' || true)
          echo "changed_files=$files" >> $GITHUB_OUTPUT

      - name: Build & Push changed images
        if: github.event_name == 'push' && steps.changed.outputs.changed_files != ''
        run: |
          owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          for file in ${{ steps.changed.outputs.changed_files }}; do
            dir=$(dirname "$file")
            name=$(echo "$dir" | tr '/' '-')
            version_file="$dir/VERSION"
            if [ -f "$version_file" ]; then
              version=$(cat "$version_file")
            else
              version="latest"
            fi
            image="ghcr.io/$owner/$name:$version"
            echo "Building and pushing $file as $image"
            docker build -t "$image" "$dir"
            docker push "$image"
            # Optionally also tag as latest if version is not latest
            if [ "$version" != "latest" ]; then
              docker tag "$image" "ghcr.io/$owner/$name:latest"
              docker push "ghcr.io/$owner/$name:latest"
            fi
          done

      - name: Bump patch version and push
        if: github.event_name == 'push' && steps.changed.outputs.changed_files != ''
        run: |
          set -e
          for file in ${{ steps.changed.outputs.changed_files }}; do
            dir=$(dirname "$file")
            version_file="$dir/VERSION"
            if [ -f "$version_file" ]; then
              old_version=$(cat "$version_file")
              # Bump patch version (X.Y.Z -> X.Y.$((Z+1)))
              new_version=$(echo "$old_version" | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
              echo "$new_version" > "$version_file"
              echo "Bumped $version_file: $old_version -> $new_version"
            fi
          done
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add salami/**/VERSION
          git commit -m "ci: bump image version(s) [skip ci]" || echo "No changes to commit"
          git push

      - name: Manual build & push
        if: github.event_name == 'workflow_dispatch' && inputs.target != ''
        run: |
          owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          dir=$(dirname "${{ inputs.target }}")
          name=$(echo "$dir" | tr '/' '-')
          version_file="$dir/VERSION"
          if [ -f "$version_file" ]; then
            version=$(cat "$version_file")
          else
            version="latest"
          fi
          image="ghcr.io/$owner/$name:$version"
          echo "Building and pushing manual target ${{ inputs.target }} as $image"
          docker build -t "$image" "$dir"
          docker push "$image"
          # Optionally also tag as latest if version is not latest
          if [ "$version" != "latest" ]; then
            docker tag "$image" "ghcr.io/$owner/$name:latest"
            docker push "ghcr.io/$owner/$name:latest"
            fi

      - name: Bump patch version and push (manual)
        if: github.event_name == 'workflow_dispatch' && inputs.target != ''
        run: |
          set -e
          dir=$(dirname "${{ inputs.target }}")
          version_file="$dir/VERSION"
          if [ -f "$version_file" ]; then
            old_version=$(cat "$version_file")
            new_version=$(echo "$old_version" | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
            echo "$new_version" > "$version_file"
            echo "Bumped $version_file: $old_version -> $new_version"
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add "$version_file"
            git commit -m "ci: bump image version (manual) [skip ci]" || echo "No changes to commit"
            git push
          fi
      